Alex Volz
CPSC-207-01
Assignment 6. Part C

NOTE:
*m=/home/SRUNET/david.dailey/words*

1. Create a file containing each of the lowercase letters of the alphabet having one letter on each line. without having to type all 26 letters; 

1a. If you can't remember how to do it without typing all 26 letters, then go ahead and create the file the slow way. (display the file as created using cat )

[SRUNET\axv1017@obsidian ~]$ cat alphabet
a
b
c
d
....

*File created long way with nano and cat used to display contents.*

2. Using a loop, find how many words in /home/SRUNET/david.dailey/words contain each of those 26 letters

at least once

[SRUNET\axv1017@obsidian ~]$ for i in `cat alphabet`; do echo $i; grep -c $i $m; done
a
19360
b
5431
c
11487
d
8396
....

at the beginning of the word

[SRUNET\axv1017@obsidian ~]$ for i in `cat alphabet`; do echo $i; grep -c ^$i $m; done
a
2458
b
1876
c
3447
d
2259
....

at the end of the word

[SRUNET\axv1017@obsidian ~]$ for i in `cat alphabet`; do echo $i; grep -c $i$ $m; done
a
620
b
142
c
799
d
2115
....

both at the beginnning and the end of the word

[SRUNET\axv1017@obsidian ~]$ for i in `cat alphabet`; do echo $i; grep -c ^$i$ $m; done
a
1
b
0
c
0
d
0
....

*1st i assigned i then i echoed i to show the letters then used grep with -c to count how many times each letter is used in the document.*

3. Below are illustrated, for each of the letters u,v,w,x,y, and z, the number of words in /home/SRUNET/david.dailey/words that contain exactly two occurrences of that letter, together with an example:

v 94 bivalve
w 94 awkward
x 3 executrix
y 196 abysmally
z 58 bedazzle

Note that the count for 'y' is 196 rather than 197 since 'syzygy' contains three y's.

Create a script which produces just this sort of output (spanning exactly 26 lines and including an example) for all 26 letters of the alphabet.

[SRUNET\axv1017@obsidian ~]$ nano
[SRUNET\axv1017@obsidian ~]$ cat script1
m=/home/SRUNET/david.dailey/words
for i in {a..z};
do
count=`grep -c .*$i.*$i.* $m`
example=`grep .*$i.*$i.* $m|head -1`
echo $i $count $example
done
[SRUNET\axv1017@obsidian ~]$ chmod +x script1
[SRUNET\axv1017@obsidian ~]$ ./script1
a 4388 aardvark
b 370 abba
c 1801 acacia
d 922 abandoned
....

*1st i used nano to write the program then cat to read it followed by chmod to allow it to be used then ./ to execute it.
When i used the file alphabet instead of {a..z} it told me i did not have permission to open the file there.*

4. Write a script to produce an html table presenting the data from problem #2 above, such as shown below, having 4 columns in each of 26 rows. (See here for info on basic html, here for information on tables within HTML, and here for examples of shell scripts that write HTML code.) Note, due to changes in the dictionaries, these numbers may not match yours exactly.

letter	total	start	end	both start and end
a	14955	2459	624	100
b	3983	1878	142	85
...	...	...	...	
z	526	74	22	4

[SRUNET\axv1017@obsidian ~]$ nano script2
[SRUNET\axv1017@obsidian ~]$ cat script2
m=/home/SRUNET/david.dailey/words
echo "<html><body><table border=1>"
for i in {a..z};
do
count=`grep -c $i $m`
start=`grep -c ^$i $m`
end=`grep -c $i$ $m`
both=`grep -c ^$i$ $m`
echo "<tr><td>letter</td><td>total</td><td>start</td><td>end</td><td>both start and end</td></tr>"
echo "<tr><td>$i</td><td>$count</td><td>$start</td><td>$end</td><td>$both</td></tr>"
done
echo "</table></body></html>"
[SRUNET\axv1017@obsidian ~]$ chmod +x script2
[SRUNET\axv1017@obsidian ~]$ ./script2
<html><body><table border=1>
<tr><td>letter</td><td>total</td><td>start</td><td>end</td><td>both start and end</td></tr>
<tr><td>a</td><td>19360</td><td>2458</td><td>620</td><td>1</td></tr>
<tr><td>letter</td><td>total</td><td>start</td><td>end</td><td>both start and end</td></tr>
<tr><td>b</td><td>5431</td><td>1876</td><td>142</td><td>0</td></tr>
<tr><td>letter</td><td>total</td><td>start</td><td>end</td><td>both start and end</td></tr>
<tr><td>c</td><td>11487</td><td>3447</td><td>799</td><td>0</td></tr>
<tr><td>letter</td><td>total</td><td>start</td><td>end</td><td>both start and end</td></tr>
<tr><td>d</td><td>8396</td><td>2259</td><td>2115</td><td>0</td></tr>

letter	total	start	end	both start and end
a	19360	2458	620	1
letter	total	start	end	both start and end
b	5431	1876	142	0
letter	total	start	end	both start and end
c	11487	3447	799	0
letter	total	start	end	both start and end
d	8396	2259	2115	0
letter	total	start	end	both start and end

*1st i used nano to write the program adding html table tags then cat to read it followed by chmod to allow it to be used then ./ to execute it.*

5. Write a script which determines which three letters most frequently end words in Spanish, French, Italian, and German. While the data need not be presented in HTML format, they should nevertheless be organized in tabular form for ease of reading. Data can be found on obsidian at 

p=/home/SRUNET/david.dailey/data/fr.txt (French)
o=/home/SRUNET/david.dailey/data/es.txt (Spanish)
k=/home/SRUNET/david.dailey/data/de.txt (German)
n=/home/SRUNET/david.dailey/data/it.txt (Italian)

[SRUNET\axv1017@obsidian ~]$ nano script3
[SRUNET\axv1017@obsidian ~]$ chmod +x script3
[SRUNET\axv1017@obsidian ~]$ cat script3
p=/home/SRUNET/david.dailey/data/fr.txt
o=/home/SRUNET/david.dailey/data/es.txt
k=/home/SRUNET/david.dailey/data/de.txt
n=/home/SRUNET/david.dailey/data/it.txt
for i in {a..z}{a..z}{a..z};
do
count=`grep -c .*$i $p`
echo $p $i $count
count=`grep -c .*$i $o`
echo $o $i $count
count=`grep -c .*$i $k`
echo $k $i $count
count=`grep -c .*$i $n`
echo $n $i $count
done
[SRUNET\axv1017@obsidian ~]$ ./script3
/home/SRUNET/david.dailey/data/fr.txt aaa 221
/home/SRUNET/david.dailey/data/es.txt aaa 531
/home/SRUNET/david.dailey/data/de.txt aaa 115
/home/SRUNET/david.dailey/data/it.txt aaa 150
/home/SRUNET/david.dailey/data/fr.txt aab 17
/home/SRUNET/david.dailey/data/es.txt aab 56
/home/SRUNET/david.dailey/data/de.txt aab 15
/home/SRUNET/david.dailey/data/it.txt aab 18

*1st i used nano to write the program then cat to read it followed by chmod to allow it to be used then ./ to execute it. I could not get sort and
uniq to work to filter just the top combonations.*

6. Make the simplifying assumption that the most common three-letter ending for English words is one that ends in one of the 5 most frequent letters as shown in the rightmost column of the above table: namely, 'e', 'n', 't', 'y' or 'r'.What is this most common ending trigram and what is its frequency within /home/SRUNET/david.dailey/words? Why is this simplifying assumption useful?

[SRUNET\axv1017@obsidian ~]$ nano script4
[SRUNET\axv1017@obsidian ~]$ chmod +x script4
[SRUNET\axv1017@obsidian ~]$ cat script4
m=/home/SRUNET/david.dailey/words
for i in [entyr];
do
count=`grep -c .*$i$i$i $m`
echo $i $count
done
[SRUNET\axv1017@obsidian ~]$ ./script4
[entyr] 6027

*1st i used nano to write the program then cat to read it followed by chmod to allow it to be used then ./ to execute it. I could not get grep to work 
to count the individual cases of each of these combonations so it only shows the total for all of them.*

7. Make a series of commands (stored in a file) which when executed converts a file containing English text into Pig Latin (see example of a running program which does this task). Extra credit if you can handle the exceptions not handled in the example program.

Class discussion on executable files and the system parameter $1 will be relevant.

[SRUNET\axv1017@obsidian ~]$ nano script5
[SRUNET\axv1017@obsidian ~]$ chmod +x script5
[SRUNET\axv1017@obsidian ~]$ cat script5
sed s/.*[a e i o u]/.*ay$/g $1
[SRUNET\axv1017@obsidian ~]$ ./script5 hello
sed: -e expression #1, char 6: unterminated `s' command

*1st i used nano to write the program then cat to read it followed by chmod to allow it to be used then ./ to execute it. I could not get sed to work with me kept getting that error message no matter what i tried. I also was not sure how to assign the eralier variables for the later use*